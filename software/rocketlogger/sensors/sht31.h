/**
 * Copyright (c) 2016-2017, ETH Zurich, Computer Engineering Group
 */

#ifndef SENSOR_SHT31_H_
#define SENSOR_SHT31_H_

#include <stdint.h>


#define SHT31_I2C_ADDRESS_LEFT 0x44

#define SHT31_I2C_ADDRESSES { (SHT31_I2C_ADDRESS_LEFT) }

#define SHT31_CHANNEL_TEMPERATURE 0
#define SHT31_CHANNEL_HUMIDITY 1


// register definitions
#define SHT31_ID 0x60

#define SHT31_COMMAND 0x80

#define SHT31_REG_CALIBRATION_BLOCK1 0x88
#define SHT31_REG_ID 0xD0
#define SHT31_REG_RESET 0xE0
#define SHT31_REG_CALIBRATION_BLOCK2 0xE1
#define SHT31_REG_CONTROL_HUMIDITY 0xF2
#define SHT31_REG_STATUS 0xF3
#define SHT31_REG_CONTROL_MEASURE 0xF4
#define SHT31_REG_CONFIG 0xF5
#define SHT31_REG_PREASURE_MSB 0xF7
#define SHT31_REG_PREASURE_LSB 0xF8
#define SHT31_REG_PREASURE_XLSB 0xF9
#define SHT31_REG_TEMPERATURE_MSB 0xFA
#define SHT31_REG_TEMPERATURE_LSB 0xFB
#define SHT31_REG_TEMPERATURE_XLSB 0xFC
#define SHT31_REG_HUMIDITY_MSB 0xFD
#define SHT31_REG_HUMIDITY_LSB 0xFE

#define SHT31_RESET_VALUE 0xB6

#define SHT31_CALIBRATION_BLOCK1_SIZE 26
#define SHT31_CALIBRATION_BLOCK2_SIZE 16

#define SHT31_OVERSAMPLE_HUMIDITY_OFF 0x00
#define SHT31_OVERSAMPLE_HUMIDITY_1 0x01
#define SHT31_OVERSAMPLE_HUMIDITY_2 0x02
#define SHT31_OVERSAMPLE_HUMIDITY_4 0x03
#define SHT31_OVERSAMPLE_HUMIDITY_8 0x04
#define SHT31_OVERSAMPLE_HUMIDITY_16 0x0f

#define SHT31_MEASURING 0x03
#define SHT31_UPDATE 0x1

#define SHT31_OVERSAMPLE_TEMPERATURE_OFF 0x00
#define SHT31_OVERSAMPLE_TEMPERATURE_1 0x20
#define SHT31_OVERSAMPLE_TEMPERATURE_2 0x40
#define SHT31_OVERSAMPLE_TEMPERATURE_4 0x60
#define SHT31_OVERSAMPLE_TEMPERATURE_8 0x80
#define SHT31_OVERSAMPLE_TEMPERATURE_16 0xA0
#define SHT31_OVERSAMPLE_PREASURE_OFF 0x00
#define SHT31_OVERSAMPLE_PREASURE_1 0x04
#define SHT31_OVERSAMPLE_PREASURE_2 0x08
#define SHT31_OVERSAMPLE_PREASURE_4 0x0C
#define SHT31_OVERSAMPLE_PREASURE_8 0x10
#define SHT31_OVERSAMPLE_PREASURE_16 0x14
#define SHT31_MODE_SLEEP 0x00
#define SHT31_MODE_FORCE 0x01
#define SHT31_MODE_NORMAL 0x03

#define SHT31_STANDBY_DURATION_0_5 0x00
#define SHT31_STANDBY_DURATION_62 0x20
#define SHT31_STANDBY_DURATION_125 0x40
#define SHT31_STANDBY_DURATION_250 0x60
#define SHT31_STANDBY_DURATION_500 0x80
#define SHT31_STANDBY_DURATION_1000 0xA0
#define SHT31_STANDBY_DURATION_10 0xC0
#define SHT31_STANDBY_DURATION_20 0xE0
#define SHT31_FILTER_OFF 0x00
#define SHT31_FILTER_2 0x04
#define SHT31_FILTER_4 0x08
#define SHT31_FILTER_8 0x0C
#define SHT31_FILTER_16 0x10
#define SHT31_SPI_EN 0x01

#define SHT31_DATA_BLOCK_SIZE 8

#define SHT31_HUMIDITY_MAX 419430400

#define SHT31_TEMPERATURE_OFFSET 76800
#define SHT31_TEMPERATURE_MAX 419430400

#define SHT31_PREASURE_OFFSET 1048576
#define SHT31_PREASURE_MAX 419430400


/*
 * API FUNCTIONS
 */
int SHT31_init(uint8_t);
void SHT31_close(uint8_t);
int SHT31_read(uint8_t);
int32_t SHT31_getValue(uint8_t, uint8_t);


/*
 * Helper FUNCTIONS
 */
uint8_t SHT31_getID(void);
int SHT31_readCalibration(uint8_t);
int SHT31_setParameters(uint8_t);
int SHT31_getIndex(uint8_t);

uint32_t SHT31_compensate_temperature_fine(uint8_t, int32_t);
uint32_t SHT31_compensate_temperature(uint8_t, int32_t);
uint32_t SHT31_compensate_preasure(uint8_t, int32_t, int32_t);
uint32_t SHT31_compensate_humidity(uint8_t, int32_t, int32_t);


#endif /* SENSOR_SHT31_H_ */
